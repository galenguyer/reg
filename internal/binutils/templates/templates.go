// Code generated by vfsgen; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 6, 24, 5, 27, 44, 899566086, time.UTC),
		},
		"/repositories.html": &vfsgen۰CompressedFileInfo{
			name:             "repositories.html",
			modTime:          time.Date(2021, 6, 16, 16, 33, 42, 840025219, time.UTC),
			uncompressedSize: 1904,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xb4\x55\x4b\x6f\xdc\x36\x10\xbe\xef\xaf\x18\x13\x39\x46\x22\x8c\x1e\xe2\x2e\x28\xa1\x85\xe3\x83\x81\x3e\x02\xa3\x06\x5a\x04\x39\x70\xa9\x91\x44\x2f\x45\x2a\xe4\x68\x83\xad\xaa\xff\x5e\x50\x0f\xec\xc3\x6b\xd7\x3d\x44\x17\x8a\x33\xdf\x7c\x9c\xf9\x86\x1a\xf5\x7d\x81\xa5\xb6\x08\xcc\x63\xeb\x82\x26\xe7\x35\x06\x36\x0c\x2b\x71\xf5\xf1\xf7\xdb\x3f\xfe\xfa\x74\x07\x35\x35\x26\x5f\x89\xab\x24\xf9\xac\x4b\x30\x04\xf7\x77\xf0\xe1\x4b\x0e\xe3\x23\xa2\x17\x94\x91\x21\x64\xcc\xba\xe4\x29\x80\xa1\x44\xe3\x8f\xd3\x72\x33\x2d\x1f\x58\x0e\xe2\xea\x33\xda\x42\x97\x5f\x92\xe4\xc0\x76\x4c\xf5\x06\xb6\x57\x68\x6e\xde\x42\xf3\x52\x7c\x45\x33\x45\x34\xe4\x17\xe2\xc7\xc0\x24\x39\x0d\xae\x51\x16\xf9\x6a\x3c\xb0\x41\x92\xa0\x6a\xe9\x03\x52\xc6\x3a\x2a\x93\x1b\x36\xbb\x36\x32\x20\xd4\x1e\xcb\x8c\x71\x06\xc7\xf8\x9a\xa8\x4d\xf0\x6b\xa7\x77\x19\xfb\x33\x79\xfc\x39\xb9\x75\x4d\x2b\x49\x6f\x0c\x32\x50\xce\x12\x5a\xca\xd8\xfd\x5d\x86\x45\x85\xef\x55\xed\x5d\x83\xd9\xf5\xc2\x4b\x9a\x0c\xe6\x7d\x0f\xe9\x03\x56\x3a\x90\xdf\x7f\x74\x8d\xd4\x16\x86\x41\xf0\xc9\x39\x01\x8d\xb6\x5b\xf0\x68\x32\xa6\x95\xb3\x0c\x68\xdf\x62\xc6\x74\x23\x2b\xe4\x5a\x39\xb6\x24\x17\x48\x92\x56\xbc\x94\xbb\x88\x4b\xa3\xeb\x19\x43\xa0\xbd\xc1\x50\x23\xd2\x79\x98\x0a\x81\x4f\xde\x54\x85\xc0\x80\xe7\x2b\xc1\x27\x85\xc4\xc6\x15\xfb\x99\xaa\xbe\x7e\x29\xe5\xfa\x7a\x86\x94\xce\x37\xd3\xeb\xb8\xd5\xb6\xed\x08\xac\x6c\x30\x63\xa5\x36\x84\x7e\x29\x21\xa0\xf4\xaa\x66\xb9\x90\x4b\xaf\x94\x41\xe9\x59\x3e\x2e\x82\xcb\x99\x90\x4f\x8c\xd3\xa6\xd0\xbb\x05\xfd\xcd\xcb\xb6\x45\xcf\x8e\x0e\x23\xb9\x59\x74\x3b\xd8\xfc\xa9\x61\x32\xd6\xf9\xc3\xf2\xc5\xec\xe1\x37\xd9\xa0\xe0\x54\x5f\x06\x7e\xea\x8c\x81\x5b\xd7\x34\xd2\x16\xcf\x51\x82\x9f\x1f\xd0\xf7\xe0\xa5\xad\x10\xde\x6d\x71\xff\x1e\xde\xed\xa4\xe9\x10\xd6\x59\x94\xed\xf0\x91\xc2\x30\xbc\x25\xcf\x02\x76\xd2\xe8\xca\x66\x8c\x5c\xcb\x9e\x23\x46\x94\x5c\x9a\x19\xa7\x00\xef\xfb\xf9\xcc\x34\xd6\x05\xff\x40\xe7\xcd\xd7\x0e\xfd\x1e\x86\x81\x93\xac\xc2\x0b\x34\x67\x71\x67\xf9\x1d\xea\x95\x17\xf2\xe4\x54\xcc\x1d\x3a\x4f\x7f\xce\xde\xeb\xaa\x26\x06\xd6\xc5\xae\x7d\xd7\x32\x84\x72\x05\xe6\x85\x53\x5b\xf4\xd0\xc6\xde\x1d\x98\x1e\x1f\xee\xc7\xcb\x3a\x42\xfe\x6f\x79\xff\xd9\x75\xb4\xc5\xb1\x6a\x82\x1f\x5d\x47\xc1\x0b\xbd\xbb\x70\x89\x4b\xe7\xe8\xf4\x0e\xb7\xf9\xaf\xb2\x40\xf8\xa6\xa9\x9e\x6b\x11\x3f\xcc\x19\xc3\x66\x7f\x50\x29\x8e\x9f\xb0\xe6\xbc\xd2\x54\x77\x9b\x54\xb9\x86\x3f\x61\x08\xa5\x97\x7f\xb3\xfc\xa7\xe5\x35\xd6\x23\x78\x7b\xc2\x7f\x5b\xa3\xda\xba\x8e\x80\x6a\x84\xe0\x3a\xaf\x10\x22\x3f\x48\x5a\xbf\xca\x5f\xa1\xed\xb4\x45\x72\xce\x04\xee\xb1\x62\xf9\x2b\xce\x4b\x27\xff\x22\x03\xc1\x63\x5b\x48\xc2\x62\x1d\x25\x4b\xa3\x65\x36\x8c\x9d\x39\xc5\x4f\x1e\xb8\xb7\x84\x7e\x27\xcd\x7a\x94\x39\x9d\xac\x8b\xf1\x38\x6c\x52\x39\x8e\x7a\x9e\x4e\xca\xc6\x49\x3f\x7a\x82\xf2\xba\x25\x08\x5e\x1d\x86\xde\x53\xe0\x93\x39\xa4\xf1\x1f\x21\xe6\x5d\x1c\x7d\xd3\xcc\x13\x7c\xfa\x7b\xf6\x3d\xda\x62\x18\x56\xff\x06\x00\x00\xff\xff\x82\xfc\x97\x4b\x70\x07\x00\x00"),
		},
		"/tags.html": &vfsgen۰CompressedFileInfo{
			name:             "tags.html",
			modTime:          time.Date(2021, 6, 24, 6, 1, 9, 719551459, time.UTC),
			uncompressedSize: 3385,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xb4\x57\xeb\x6f\xdb\x36\x10\xff\x9e\xbf\xe2\x4a\x14\x88\xdd\xd9\x62\xd2\x3d\xda\x3a\x92\xb1\xc2\x4d\xb1\x0e\x7b\xa1\x4b\x87\x0d\x45\x3f\xd0\xd4\x59\x62\x42\x91\x2a\x79\x72\xe2\x79\xfe\xdf\x07\x4a\x7e\xc8\xaf\x36\x43\x3a\x7f\x11\x79\x8f\x1f\xef\xee\xc7\x23\xe9\xf9\x3c\xc5\x89\x32\x08\x8c\x44\xe6\xd9\x62\x71\x12\x3f\x7a\xf5\xeb\xe8\xea\xaf\xdf\x2e\x21\xa7\x42\x0f\x4f\xe2\x47\xfd\xfe\x7b\x35\x01\x4d\xf0\xe6\x12\x9e\x7d\x18\x42\xfd\x8b\x83\x16\xa4\x16\xde\x27\xcc\xd8\xfe\xb5\x07\x4d\x7d\x85\x2f\x9a\xcf\xf3\xe6\xf3\x8c\x0d\x21\x7e\xf4\x1e\x4d\xaa\x26\x1f\xfa\xfd\x0d\x5a\x1b\xea\x1e\x68\x9f\x80\x79\x7e\x1f\x98\x63\xfe\x19\x2d\x21\x82\x60\x78\xc0\xbf\x76\xec\xf7\xb7\x9d\x73\x14\xe9\xf0\xa4\x5e\xb0\x40\x12\x20\x73\xe1\x3c\x52\xc2\x2a\x9a\xf4\x9f\xb3\xa5\x6a\x2c\x3c\x42\xee\x70\x92\x30\xce\xa0\x6d\x9f\x13\x95\x7d\xfc\x58\xa9\x69\xc2\xfe\xec\xbf\x7b\xd9\x1f\xd9\xa2\x14\xa4\xc6\x1a\x19\x48\x6b\x08\x0d\x25\xec\xcd\x65\x82\x69\x86\x3d\x99\x3b\x5b\x60\x72\xbe\xc2\x25\x45\x1a\x87\xf3\x39\x44\x6f\x31\x53\x9e\xdc\xec\x95\x2d\x84\x32\xb0\x58\xf0\x20\xfd\x45\x14\x08\x8b\x45\xcc\x1b\xc3\xc6\x49\x2b\x73\x03\x0e\x75\xc2\x94\xb4\x86\x01\xcd\x4a\x4c\x98\x2a\x44\x86\x5c\x49\xcb\x56\x81\x7a\x12\xa4\x24\x9f\x88\x69\xb0\x8b\x82\x6a\x0f\xc1\xd3\x4c\xa3\xcf\x11\x69\xd7\x4d\x7a\xcf\x1b\x6d\x24\xbd\x67\xc0\x87\x27\x31\x6f\xaa\x15\x8f\x6d\x3a\x5b\x42\xe5\xe7\xf7\x09\x3f\x3f\x5f\x9a\xa7\x6a\xba\xe2\xe4\xd6\x89\xb2\x44\xb7\x8c\xa9\x29\x87\x18\xaf\xb2\xdc\xc8\xdc\xb6\xa0\x11\xe6\xc3\x80\x1d\x73\xca\x0f\x6b\xaf\x44\x76\x5c\x39\x72\x28\x08\xd3\xc3\x06\xf3\xb9\x9a\x40\xf4\x83\xf0\x7f\x54\xda\xf8\xc5\x22\x38\x84\x21\x3a\x31\x56\x5a\x91\x42\x5f\x3b\xce\xe7\x68\xd2\xc5\x62\x3b\x58\xbe\x1b\xed\x7c\x0e\x4e\x98\x0c\xe1\xf1\x0d\xce\x7a\xf0\x78\x2a\x74\x85\x30\x48\x42\xc5\x4a\xeb\x15\x59\xa7\xd0\xc3\x2e\xce\xe1\xa4\x53\x98\x0a\xad\x32\x93\x30\x8d\x13\x62\x60\x6c\xa8\xe1\xbe\xe5\x3a\x8d\xc7\xed\x3c\xc4\x8a\x60\x87\xa5\x0d\xf4\x34\xc1\x34\x24\xfd\x03\x95\xd3\x1f\x2b\x74\xb3\xc0\x1d\x89\xac\x65\x70\x25\xb2\x20\x9c\x06\x1c\x76\x30\xef\x56\xb6\x6d\xd0\xa3\x56\xbb\xa1\x71\x71\x14\x36\xe6\x94\x1e\xae\xc5\xb2\x14\x4e\x65\xf9\x67\x6a\x11\xba\xfe\xff\xae\x47\x38\x4c\x0e\xae\x2d\xa0\xee\xa2\x84\xc9\xca\x79\xeb\x06\x50\x5a\x65\x08\xdd\x05\x83\xba\xa9\x13\xd6\x91\x5a\xc9\x1b\x20\x0b\xd2\x96\xb3\x2e\x03\x6b\x6a\x49\xc2\xc2\xfc\x4a\x64\x9d\xd3\xdd\xc5\x4f\xbb\x61\xe1\x6d\x59\xa8\xe2\x7f\x48\x7f\x53\xf3\x43\xa1\x7f\x89\xb2\x6f\x02\x5c\x36\x5c\xf4\xda\xba\x42\x10\xb0\xb3\xa7\xf0\xa3\x30\x3d\x78\x7a\x76\xf6\x1d\x9c\x7f\x3b\x38\xfb\x06\xde\x5d\x8d\x18\xdc\x9b\xff\xbd\x74\x1e\xba\x43\xbe\xcc\x66\x00\x95\x26\x6c\xaf\x09\x06\xbb\xd6\xec\x70\x10\xdb\xc7\xa3\x57\x99\x11\x9a\x0d\x63\x9e\xaa\xe9\x91\xa8\x0f\x31\x7e\xac\x60\xf7\x3c\xad\xd0\xa4\x6d\x1a\x62\xde\x3a\x93\x97\xa1\xec\x9d\xe4\x13\x6b\x69\xfb\x20\x2f\x87\x3f\x8b\x14\xe1\x56\x51\x0e\xb1\xb4\x29\x0e\xe3\xaf\x63\x5e\x0f\x60\x3c\xdb\x94\x3b\xdc\x9e\x7e\xc0\x79\xa6\x28\xaf\xc6\x91\xb4\x05\xbf\x46\xef\x27\x4e\xfc\xcd\x86\xdf\xaf\x86\x21\xcf\x98\x97\x5b\xf8\xa3\x1c\xe5\x8d\xad\x08\x28\x47\xf0\xb6\x72\x12\x21\xe0\x83\xa0\xc1\x27\xf1\x33\x34\x95\x32\x48\xd6\x6a\xcf\x1d\x66\x6c\xf8\x09\xe5\xa1\x95\x7f\x12\x9e\xe0\x5d\x99\x86\x1d\x3d\x08\x25\x8b\x82\x64\x29\xa8\xfb\xb0\x6c\x97\x2b\x74\x1f\x8f\x9a\x12\xad\x3a\x2d\xf6\xd2\xa9\x92\xc0\x3b\xb9\xb9\x70\xaf\x3d\x6f\xc4\x3e\x0a\x6f\x95\x78\x39\x6b\x3c\x76\x6f\xa5\x2d\x98\xe6\x01\x40\x78\x47\xfc\x5a\x4c\x45\x23\x5d\xd3\x31\x15\x0e\xc4\xb5\xb8\x1b\x09\xad\x3d\x24\xf0\xfe\xe4\x21\x97\xd3\xe9\x83\x3a\x24\xba\xf6\xd6\x9c\xf6\x4e\x8e\x6d\xb8\x0f\x17\xcb\xc1\xad\x32\xa9\xbd\x8d\xac\xd1\x56\xa4\x90\xc0\xa4\x32\x92\x94\x35\x9d\x2e\xcc\xd7\xde\x2f\x9d\x13\xb3\xa8\x74\x96\x6c\x28\x41\x34\xb1\xee\x52\xc8\x3c\x92\x42\xeb\xce\x3a\xe5\xde\xc6\xb9\x72\xba\x07\xca\xa4\x78\xd7\x9d\xb7\x72\x0a\x6b\xb4\xaf\xf8\xd9\xc8\x56\x86\x82\x75\xf7\x62\x6d\xb6\x58\x8f\x17\x17\x4b\x7a\xb7\x09\xda\x34\x58\xdc\x56\xc0\x7a\x79\x58\x1d\xe7\x24\xb2\x76\x1a\x81\x20\xd4\x58\x40\x02\xa9\x95\x55\x81\x86\x22\x59\x9f\x98\x97\x1a\xc3\xac\x53\x73\x2b\x1c\x0a\xd6\x0a\x68\x6d\x1b\x5e\x63\x51\x78\x4b\x99\x74\x94\x2b\x9d\x76\x02\x58\xcb\x30\x4c\xa3\x86\xdb\x04\xd8\x67\x5f\x6b\x03\xf6\x15\x89\x6c\xc7\xdd\xa3\x46\x49\x9d\xee\x9e\x98\x7e\xaf\x35\xca\x9a\xb7\x61\x2b\x75\xce\x7a\xf0\x22\xfc\xba\x17\xc0\x9f\xbc\xb6\x0e\x0a\x3b\x56\x1a\x21\xc5\xa9\x92\xe8\x9f\xf0\xfd\xf8\xf1\x0e\xe5\xc8\x16\x85\x30\x69\xa7\xbe\xf2\x8e\x67\xe9\xb0\xb0\x53\x3c\x98\xa5\x43\xaa\x9c\x01\x72\x15\xae\x89\xda\xe1\x29\xe6\xcd\xc3\x35\xe6\xcd\xdf\xa1\x15\x67\xff\x06\x00\x00\xff\xff\xc0\xc9\x1f\x7f\x39\x0d\x00\x00"),
		},
		"/vulns.html": &vfsgen۰CompressedFileInfo{
			name:             "vulns.html",
			modTime:          time.Date(2021, 6, 16, 16, 33, 42, 840025219, time.UTC),
			uncompressedSize: 2715,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xa4\x56\x6d\x6f\xa4\x36\x10\xfe\x9e\x5f\x31\xb1\xee\x63\x58\x2b\x89\xaa\x4b\x23\x2f\x6a\x2f\x89\xda\x93\xae\x2f\xba\xcb\x55\xad\x4e\xa7\xca\xc0\x00\xbe\x18\x9b\xda\xc3\xb6\x5b\xc4\x7f\xaf\xc0\xb0\xcb\xbe\xa5\xa9\xba\x1f\x58\x76\x67\xe6\x99\x79\x9e\x19\xc6\xb4\x6d\x86\xb9\x32\x08\x6c\xd5\x68\xe3\x59\xd7\x9d\x89\xf3\xfb\x9f\xee\x1e\x7f\xfb\xf9\x01\x4a\xaa\x74\x7c\x26\xce\xa3\xe8\x93\xca\x41\x13\xbc\x7d\x80\xd7\x9f\x63\x18\x3e\xa2\xb7\x42\xaa\xa5\xf7\x4b\x66\x6c\xf4\xc5\x83\xa6\x48\xe1\xd7\xe1\xeb\x26\x7c\xbd\x66\x31\x88\xf3\x4f\x68\x32\x95\x7f\x8e\xa2\x2d\xda\x1c\xea\x05\x68\xcf\xc0\xdc\xbc\x04\xe6\x54\x7c\x41\x23\x44\xff\x47\x7c\x24\x7e\x08\x8c\xa2\xdd\xe0\x12\x65\x16\x9f\x0d\x09\x2b\x24\x09\x69\x29\x9d\x47\x5a\xb2\x86\xf2\xe8\x86\x8d\xa6\x44\x7a\x84\xd2\x61\xbe\x64\x9c\xc1\xdc\xbf\x24\xaa\x23\xfc\xa3\x51\xab\x25\xfb\x35\xfa\xf8\x6d\x74\x67\xab\x5a\x92\x4a\x34\x32\x48\xad\x21\x34\xb4\x64\x6f\x1f\x96\x98\x15\x78\x91\x96\xce\x56\xb8\xbc\x9c\x70\x49\x91\xc6\xb8\x6d\x61\xf1\x1e\x0b\xe5\xc9\xad\x3f\xbe\x7f\x07\x5d\xc7\xc3\x5f\xb5\x85\xae\xbb\xed\xef\x1f\x65\x01\x5d\x07\xbf\x34\xda\xa0\x93\x89\xd2\x8a\xd6\xd0\x3b\x38\x12\x3c\xa0\x04\x44\xad\xcc\x13\x38\xd4\x4b\xa6\x52\x6b\x18\xd0\xba\xc6\x25\x53\x95\x2c\x90\xab\xd4\xb2\x89\x85\x27\x49\x2a\xe5\xb9\x5c\xf5\x7e\x8b\xde\x74\x80\xe0\x69\xad\xd1\x97\x88\xb4\x1f\x96\x7a\xcf\x13\x6b\xc9\x93\x93\xf5\xa2\x52\x66\x91\x7a\xcf\x80\xc7\x67\x82\x07\x45\x45\x62\xb3\xf5\x88\x98\xa9\xd5\xd4\x88\x5e\x11\xa9\x0c\xba\x31\xdb\x60\xb7\x9b\x3e\x25\x0e\x65\x96\xba\xa6\x4a\x66\xf6\xb1\xaa\x58\xc8\x4d\x0b\x8e\x48\x26\xb8\x8c\x05\xd7\xea\x20\x6e\xc2\x96\x29\xa9\x15\x4e\xa1\xfb\xd2\xee\x86\x0a\x6e\x75\x7c\xb6\xfd\x39\x63\x50\xcb\x02\xa3\x9e\xe3\x0e\x87\x30\xb1\x97\xff\xa1\x95\xc2\x57\x52\xeb\xf8\x78\x47\x83\x4d\xf0\xf2\x72\x5e\x53\xa6\x56\xb3\x9f\xf5\x54\x11\xe1\x5f\x14\x39\x55\x94\xc4\xe2\xef\xb0\x47\x23\xcc\xc0\x9a\x5b\x68\xdb\xc5\xbd\x24\xec\xd9\xd5\x33\x3a\x6d\x1b\x1e\x97\xc5\x1b\x99\xf5\xf9\x3d\x7c\xd5\x75\x47\xc9\x4a\x8d\x8e\x60\xb8\x46\x99\x34\x05\x3a\x06\xce\x6a\x1c\x2d\x7b\x02\xb4\xed\x06\xb1\xeb\xe0\x7b\x55\x94\x17\x70\xe7\x14\xa9\x54\xea\x0b\x90\x26\xe3\xd6\xc1\x3d\xe6\xa9\x35\x97\xb0\x9a\x11\x57\xe8\x21\xb7\x8d\xc9\x4e\x91\x6d\x5b\x34\x59\xd7\xcd\x3a\x52\x5e\xc5\x1f\x9a\xaa\x92\x6e\x2d\x78\x79\x35\x93\xa5\xd9\x0c\x93\x56\x9e\xa2\xc2\xd9\xa6\x66\x27\x87\x62\xeb\x13\x29\xc2\x6a\xcf\x71\x70\xf6\xb5\x34\x9b\xf9\x94\x59\x11\x46\x48\xa3\x81\x45\x10\xaf\x97\xb7\x77\x3a\x12\x9b\xc4\x8f\x96\xa4\x16\x3c\xd9\xab\xe0\x60\x50\xdb\xd6\xf5\xfa\xc2\xab\x27\x5c\x5f\xc0\xab\x95\xd4\x0d\xc2\xed\x72\xcc\xf1\x66\xfd\x01\x57\xe8\x14\xad\x67\x8d\xfa\x7f\x54\xb4\x4c\x50\xc3\x70\x8d\xda\x36\xb5\xda\xba\x21\x79\xd7\x41\xdd\x68\x3d\x0d\xd4\x48\x75\x2c\xe8\x34\xd5\xb6\x1d\xa2\x61\xbf\xbe\x23\x44\x43\x2b\xb7\x1e\xcd\xce\xa3\x56\x5e\xc5\xf7\x48\x52\x69\xbf\xdb\xd8\x8d\x40\xc3\xe9\xf6\x2f\xd2\x6c\x9d\x27\x1d\x43\xd8\x89\x31\xaf\xa5\x41\x0d\xc3\x35\xca\x30\x97\x8d\xde\x1f\xed\x03\xef\x61\x05\x28\x53\x1c\x93\xb9\xbc\xde\x75\x1d\xf6\x73\x2f\x65\x28\x67\xf1\xa3\xac\x70\x4f\xa7\x97\xb7\x28\x40\x6c\x39\xef\x75\xeb\xc0\x7e\x72\x36\x79\x79\xbd\x3f\x94\x3b\xcf\xdc\x71\xda\xfd\x5a\x67\xc7\xda\x3f\x26\xbe\x47\x9f\x3a\x55\x93\xb2\xe6\x60\x14\x5e\x00\x9f\x5b\x4b\x07\x8b\x75\x70\x9d\x96\xff\x26\xd3\x3b\x65\x9e\xba\x8e\x01\x49\x57\xf4\x07\xf6\xef\x89\x96\xe6\x69\xa6\x41\x70\xe8\xcf\x85\xe7\xea\x38\xb1\x69\x4e\x6f\x9e\x50\xe2\xce\xf2\x4d\xd1\x1c\x56\x2d\xea\xf8\x07\x99\x21\xfc\xa9\xa8\x04\x91\xda\x0c\x63\x71\x2d\xf8\x70\x03\xc9\x7a\xcb\xa8\x7f\x85\xf0\xb7\x9c\x17\x8a\xca\x26\x59\xa4\xb6\xe2\x5f\xd0\xfb\xdc\xc9\xbf\x59\xfc\xcd\x74\x1b\xce\xb7\xfa\x20\xc7\x5d\x89\xe9\x93\x6d\x08\xa8\x44\xf0\xb6\x71\x29\x42\x9f\x03\x24\xdd\x3e\x9b\xa3\x40\xd3\x28\x83\x64\xad\xf6\xdc\x61\xc1\xe2\x67\x8c\x07\xd9\x05\x0f\x3a\x8c\x47\x7c\x10\x51\xf0\x70\xea\x0b\x1e\xde\x37\x27\xf1\xfe\x09\x00\x00\xff\xff\x30\xe0\x25\xc3\x9b\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/repositories.html"].(os.FileInfo),
		fs["/tags.html"].(os.FileInfo),
		fs["/vulns.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
