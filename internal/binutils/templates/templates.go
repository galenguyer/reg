// Code generated by vfsgen; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 6, 24, 5, 27, 44, 899566086, time.UTC),
		},
		"/repositories.html": &vfsgen۰CompressedFileInfo{
			name:             "repositories.html",
			modTime:          time.Date(2021, 6, 16, 16, 33, 42, 840025219, time.UTC),
			uncompressedSize: 1904,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xb4\x55\x4b\x6f\xdc\x36\x10\xbe\xef\xaf\x18\x13\x39\x46\x22\x8c\x1e\xe2\x2e\x28\xa1\x85\xe3\x83\x81\x3e\x02\xa3\x06\x5a\x04\x39\x70\xa9\x91\x44\x2f\x45\x2a\xe4\x68\x83\xad\xaa\xff\x5e\x50\x0f\xec\xc3\x6b\xd7\x3d\x44\x17\x8a\x33\xdf\x7c\x9c\xf9\x86\x1a\xf5\x7d\x81\xa5\xb6\x08\xcc\x63\xeb\x82\x26\xe7\x35\x06\x36\x0c\x2b\x71\xf5\xf1\xf7\xdb\x3f\xfe\xfa\x74\x07\x35\x35\x26\x5f\x89\xab\x24\xf9\xac\x4b\x30\x04\xf7\x77\xf0\xe1\x4b\x0e\xe3\x23\xa2\x17\x94\x91\x21\x64\xcc\xba\xe4\x29\x80\xa1\x44\xe3\x8f\xd3\x72\x33\x2d\x1f\x58\x0e\xe2\xea\x33\xda\x42\x97\x5f\x92\xe4\xc0\x76\x4c\xf5\x06\xb6\x57\x68\x6e\xde\x42\xf3\x52\x7c\x45\x33\x45\x34\xe4\x17\xe2\xc7\xc0\x24\x39\x0d\xae\x51\x16\xf9\x6a\x3c\xb0\x41\x92\xa0\x6a\xe9\x03\x52\xc6\x3a\x2a\x93\x1b\x36\xbb\x36\x32\x20\xd4\x1e\xcb\x8c\x71\x06\xc7\xf8\x9a\xa8\x4d\xf0\x6b\xa7\x77\x19\xfb\x33\x79\xfc\x39\xb9\x75\x4d\x2b\x49\x6f\x0c\x32\x50\xce\x12\x5a\xca\xd8\xfd\x5d\x86\x45\x85\xef\x55\xed\x5d\x83\xd9\xf5\xc2\x4b\x9a\x0c\xe6\x7d\x0f\xe9\x03\x56\x3a\x90\xdf\x7f\x74\x8d\xd4\x16\x86\x41\xf0\xc9\x39\x01\x8d\xb6\x5b\xf0\x68\x32\xa6\x95\xb3\x0c\x68\xdf\x62\xc6\x74\x23\x2b\xe4\x5a\x39\xb6\x24\x17\x48\x92\x56\xbc\x94\xbb\x88\x4b\xa3\xeb\x19\x43\xa0\xbd\xc1\x50\x23\xd2\x79\x98\x0a\x81\x4f\xde\x54\x85\xc0\x80\xe7\x2b\xc1\x27\x85\xc4\xc6\x15\xfb\x99\xaa\xbe\x7e\x29\xe5\xfa\x7a\x86\x94\xce\x37\xd3\xeb\xb8\xd5\xb6\xed\x08\xac\x6c\x30\x63\xa5\x36\x84\x7e\x29\x21\xa0\xf4\xaa\x66\xb9\x90\x4b\xaf\x94\x41\xe9\x59\x3e\x2e\x82\xcb\x99\x90\x4f\x8c\xd3\xa6\xd0\xbb\x05\xfd\xcd\xcb\xb6\x45\xcf\x8e\x0e\x23\xb9\x59\x74\x3b\xd8\xfc\xa9\x61\x32\xd6\xf9\xc3\xf2\xc5\xec\xe1\x37\xd9\xa0\xe0\x54\x5f\x06\x7e\xea\x8c\x81\x5b\xd7\x34\xd2\x16\xcf\x51\x82\x9f\x1f\xd0\xf7\xe0\xa5\xad\x10\xde\x6d\x71\xff\x1e\xde\xed\xa4\xe9\x10\xd6\x59\x94\xed\xf0\x91\xc2\x30\xbc\x25\xcf\x02\x76\xd2\xe8\xca\x66\x8c\x5c\xcb\x9e\x23\x46\x94\x5c\x9a\x19\xa7\x00\xef\xfb\xf9\xcc\x34\xd6\x05\xff\x40\xe7\xcd\xd7\x0e\xfd\x1e\x86\x81\x93\xac\xc2\x0b\x34\x67\x71\x67\xf9\x1d\xea\x95\x17\xf2\xe4\x54\xcc\x1d\x3a\x4f\x7f\xce\xde\xeb\xaa\x26\x06\xd6\xc5\xae\x7d\xd7\x32\x84\x72\x05\xe6\x85\x53\x5b\xf4\xd0\xc6\xde\x1d\x98\x1e\x1f\xee\xc7\xcb\x3a\x42\xfe\x6f\x79\xff\xd9\x75\xb4\xc5\xb1\x6a\x82\x1f\x5d\x47\xc1\x0b\xbd\xbb\x70\x89\x4b\xe7\xe8\xf4\x0e\xb7\xf9\xaf\xb2\x40\xf8\xa6\xa9\x9e\x6b\x11\x3f\xcc\x19\xc3\x66\x7f\x50\x29\x8e\x9f\xb0\xe6\xbc\xd2\x54\x77\x9b\x54\xb9\x86\x3f\x61\x08\xa5\x97\x7f\xb3\xfc\xa7\xe5\x35\xd6\x23\x78\x7b\xc2\x7f\x5b\xa3\xda\xba\x8e\x80\x6a\x84\xe0\x3a\xaf\x10\x22\x3f\x48\x5a\xbf\xca\x5f\xa1\xed\xb4\x45\x72\xce\x04\xee\xb1\x62\xf9\x2b\xce\x4b\x27\xff\x22\x03\xc1\x63\x5b\x48\xc2\x62\x1d\x25\x4b\xa3\x65\x36\x8c\x9d\x39\xc5\x4f\x1e\xb8\xb7\x84\x7e\x27\xcd\x7a\x94\x39\x9d\xac\x8b\xf1\x38\x6c\x52\x39\x8e\x7a\x9e\x4e\xca\xc6\x49\x3f\x7a\x82\xf2\xba\x25\x08\x5e\x1d\x86\xde\x53\xe0\x93\x39\xa4\xf1\x1f\x21\xe6\x5d\x1c\x7d\xd3\xcc\x13\x7c\xfa\x7b\xf6\x3d\xda\x62\x18\x56\xff\x06\x00\x00\xff\xff\x82\xfc\x97\x4b\x70\x07\x00\x00"),
		},
		"/tags.html": &vfsgen۰CompressedFileInfo{
			name:             "tags.html",
			modTime:          time.Date(2021, 6, 24, 6, 6, 15, 72882581, time.UTC),
			uncompressedSize: 3401,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xb4\x57\x5b\x73\xdb\xb6\x12\x7e\xf7\xaf\xd8\x60\x32\x63\x39\x47\x22\xec\x9c\x73\x9a\x44\x26\x39\xcd\x28\xce\x34\x9d\xde\x26\x75\x3a\xed\x64\xf2\x00\x81\x2b\x12\x36\x08\x30\xc0\x52\xb6\xaa\xea\xbf\x77\x40\xea\x42\xdd\x12\x77\x92\xfa\x45\xe0\x5e\x3e\xec\x7e\x8b\x5d\xc0\xf3\x79\x86\x13\x65\x10\x18\x89\xdc\xb3\xc5\xe2\x24\x7e\xf4\xea\xe7\xd1\xf5\x1f\xbf\x5c\x41\x41\xa5\x4e\x4f\xe2\x47\x83\xc1\x7b\x35\x01\x4d\xf0\xe6\x0a\x9e\x7d\x48\xa1\xf9\x8b\x83\x16\xa4\x16\xde\x27\xcc\xd8\xc1\x8d\x07\x4d\x03\x85\x2f\xda\x9f\xe7\xed\xcf\x33\x96\x42\xfc\xe8\x3d\x9a\x4c\x4d\x3e\x0c\x06\x1b\xb4\x2e\xd4\x03\xd0\x3e\x01\xf3\xfc\x21\x30\xc7\xfc\x73\x5a\x42\x04\x41\x7a\xc0\xbf\x71\x1c\x0c\xb6\x9d\x0b\x14\x59\x7a\xd2\x6c\x58\x22\x09\x90\x85\x70\x1e\x29\x61\x35\x4d\x06\xcf\xd9\x52\x35\x16\x1e\xa1\x70\x38\x49\x18\x67\xd0\xb5\x2f\x88\xaa\x01\x7e\xac\xd5\x34\x61\xbf\x0f\xde\xbd\x1c\x8c\x6c\x59\x09\x52\x63\x8d\x0c\xa4\x35\x84\x86\x12\xf6\xe6\x2a\xc1\x2c\xc7\xbe\x2c\x9c\x2d\x31\xb9\x58\xe1\x92\x22\x8d\xe9\x7c\x0e\xd1\x5b\xcc\x95\x27\x37\x7b\x65\x4b\xa1\x0c\x2c\x16\x3c\x48\x7f\x12\x25\xc2\x62\x11\xf3\xd6\xb0\x75\xd2\xca\xdc\x82\x43\x9d\x30\x25\xad\x61\x40\xb3\x0a\x13\xa6\x4a\x91\x23\x57\xd2\xb2\x55\xa0\x9e\x04\x29\xc9\x27\x62\x1a\xec\xa2\xa0\xda\x43\xf0\x34\xd3\xe8\x0b\x44\xda\x75\x93\xde\xf3\x56\x1b\x49\xef\x19\xf0\xf4\x24\xe6\x2d\x5b\xf1\xd8\x66\xb3\x25\x54\x71\x91\xc6\x62\x4d\xcd\x43\x52\x11\x69\xcc\x8b\x8b\xa5\x7b\xa6\xa6\xab\x1a\xdd\x39\x51\x55\xe8\x96\x31\xb6\xf4\x88\xf1\x2a\xeb\x8d\xcc\x6d\x0b\x5a\x61\x91\x06\xfc\x98\x53\x71\x58\x7b\x2d\xf2\xe3\xca\x91\x43\x41\x98\x1d\x36\x98\xcf\xd5\x04\xa2\xef\x84\xff\xad\xd6\xc6\x2f\x16\xc1\x21\x2c\xd1\x89\xb1\xd2\x8a\x14\xfa\xc6\x71\x3e\x47\x93\x2d\x16\xdb\xc1\xf2\xdd\x68\xe7\x73\x70\xc2\xe4\x08\x8f\x6f\x71\xd6\x87\xc7\x53\xa1\x6b\x84\x61\x12\x58\xab\xac\x57\x64\x9d\x42\x0f\xbb\x38\x87\x93\xce\x60\x2a\xb4\xca\x4d\xc2\x34\x4e\x88\x81\xb1\x81\xc3\x7d\xcb\x75\x1a\x8f\xbb\x79\xac\xab\xe6\xb0\xb2\xa1\x44\x6d\x30\x6d\xa1\xfe\x82\xda\xe9\x8f\x35\xba\x59\xa8\x1f\x89\xbc\x63\x70\x2d\xf2\x20\x9c\x06\x1c\x76\x30\xef\x4e\xb6\x5d\xd0\xa3\x56\xbb\xa1\x71\x71\x14\x36\xe6\x94\x1d\xe6\x62\x49\x85\x53\x79\xf1\x19\x2e\xc2\x14\xf8\xb7\xf9\x08\xc3\xe5\xe0\xde\x02\x9a\xae\x4a\x98\xac\x9d\xb7\x6e\x08\x95\x55\x86\xd0\x5d\x32\x68\x9a\x3c\x61\x3d\xa9\x95\xbc\x05\xb2\x20\x6d\x35\x3b\x63\x60\x4d\x23\x49\x58\xf8\xbe\x16\x79\xef\x74\x77\xf3\xd3\xb3\xa6\xf5\xb6\x64\x81\xc5\x7f\x90\xfe\x86\xf3\x43\xa1\x7f\x0d\xda\x37\x01\x2e\x1b\x2e\x7a\x6d\x5d\x29\x08\xd8\xf9\x53\xf8\x5e\x98\x3e\x3c\x3d\x3f\xff\x06\x2e\xfe\x3f\x3c\xff\x1f\xbc\xbb\x1e\x31\x78\x70\xfd\xf7\xd2\xf9\xd2\x13\xf2\x75\x0e\x03\xa8\x2c\x61\x7b\x4d\x30\xdc\xb5\x66\x87\x83\xd8\x1e\x8f\x5e\xe5\x46\x68\x96\xc6\x3c\x53\xd3\x23\x51\x1f\xaa\xf8\x31\xc2\x1e\x38\xad\xd0\x64\xdd\x32\xc4\xbc\x33\x93\x97\xa1\xec\x4d\xf2\x89\xb5\xb4\x3d\xc8\xab\xf4\x47\x91\x21\xdc\x29\x2a\x20\x96\x36\xc3\x34\xfe\x6f\xcc\x9b\x05\x8c\x67\x1b\xba\xc3\x6d\xea\x87\x9c\xe7\x8a\x8a\x7a\x1c\x49\x5b\xf2\x1b\xf4\x7e\xe2\xc4\x9f\x2c\xfd\x76\xb5\x6c\xef\x90\x6a\x0b\x7f\x54\xa0\xbc\xb5\x35\x01\x15\x08\xde\xd6\x4e\x22\x04\x7c\x10\x34\xfc\x24\x7e\x8e\xa6\x56\x06\xc9\x5a\xed\xb9\xc3\x9c\xa5\x9f\x50\x1e\xda\xf9\x07\xe1\x09\xde\x55\x59\x38\xd1\xc3\x40\x59\x14\x24\x4b\x41\xd3\x87\x55\x97\xae\xd0\x7d\x3c\x6a\x29\x5a\x75\x5a\xec\xa5\x53\x15\x81\x77\x72\x73\x01\xdf\x78\xde\x8a\x7d\x14\xde\x2e\xf1\xf2\xab\xf5\xd8\xbd\x95\xb6\x60\xda\x07\x01\xe1\x3d\xf1\x1b\x31\x15\xad\x74\x5d\x8e\xa9\x70\x20\x6e\xc4\xfd\x48\x68\xed\x21\x81\xf7\x27\x5f\x72\x39\x9d\x7e\x51\x87\x44\x37\xde\x9a\xd3\xfe\xc9\xb1\x03\xf7\xe1\x72\xb9\xb8\x53\x26\xb3\x77\x91\x35\xda\x8a\x0c\x12\x98\xd4\x46\x92\xb2\xa6\x77\x06\xf3\xb5\xf7\x4b\xe7\xc4\x2c\xaa\x9c\x25\x1b\x28\x88\x26\xd6\x5d\x09\x59\x44\x52\x68\xdd\x5b\xa7\xdc\xdf\x38\xd7\x4e\xf7\x41\x99\x0c\xef\xcf\xe6\x9d\x9c\xc2\x1e\xdd\x2b\x7e\x36\xb2\xb5\xa1\x60\x7d\x76\xb9\x36\x5b\xac\xd7\x8b\xcb\x65\x79\xb7\x0b\xb4\x69\xb0\xb8\xab\x80\xf5\xf6\xb0\x1a\xe7\x24\xf2\x6e\x1a\xa1\x40\xa8\xb1\x84\x04\x32\x2b\xeb\x12\x0d\x45\xb2\x99\x98\x57\x1a\xc3\x57\xaf\xa9\xad\x70\x28\x58\x27\xa0\xb5\x6d\x78\x9d\x45\xe1\x2d\x65\xb2\x51\xa1\x74\xd6\x0b\x60\x1d\xc3\xf0\x19\xb5\xb5\x4d\x80\x7d\xf6\xc5\x36\x64\xff\x21\x91\xef\xb8\x7b\xd4\x28\xa9\x77\xb6\x27\xa6\x5f\x1b\x8d\xb2\xe6\x6d\x38\x4a\xbd\xf3\x3e\xbc\x08\x7f\x67\x97\xc0\x9f\xbc\xb6\x0e\x4a\x3b\x56\x1a\x21\xc3\xa9\x92\xe8\x9f\xf0\xfd\xf8\xf1\x1e\xe5\xc8\x96\xa5\x30\x59\xaf\xb9\xf2\x8e\x67\xe9\xb0\xb4\x53\x3c\x98\xa5\x43\xaa\x9d\x01\x72\x35\xae\x0b\xb5\x53\xa7\x98\xb7\x0f\xd9\x98\xb7\xff\x1e\xad\x6a\xf6\x77\x00\x00\x00\xff\xff\x6f\x3e\x61\x8f\x49\x0d\x00\x00"),
		},
		"/vulns.html": &vfsgen۰CompressedFileInfo{
			name:             "vulns.html",
			modTime:          time.Date(2021, 6, 16, 16, 33, 42, 840025219, time.UTC),
			uncompressedSize: 2715,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xa4\x56\x6d\x6f\xa4\x36\x10\xfe\x9e\x5f\x31\xb1\xee\x63\x58\x2b\x89\xaa\x4b\x23\x2f\x6a\x2f\x89\xda\x93\xae\x2f\xba\xcb\x55\xad\x4e\xa7\xca\xc0\x00\xbe\x18\x9b\xda\xc3\xb6\x5b\xc4\x7f\xaf\xc0\xb0\xcb\xbe\xa5\xa9\xba\x1f\x58\x76\x67\xe6\x99\x79\x9e\x19\xc6\xb4\x6d\x86\xb9\x32\x08\x6c\xd5\x68\xe3\x59\xd7\x9d\x89\xf3\xfb\x9f\xee\x1e\x7f\xfb\xf9\x01\x4a\xaa\x74\x7c\x26\xce\xa3\xe8\x93\xca\x41\x13\xbc\x7d\x80\xd7\x9f\x63\x18\x3e\xa2\xb7\x42\xaa\xa5\xf7\x4b\x66\x6c\xf4\xc5\x83\xa6\x48\xe1\xd7\xe1\xeb\x26\x7c\xbd\x66\x31\x88\xf3\x4f\x68\x32\x95\x7f\x8e\xa2\x2d\xda\x1c\xea\x05\x68\xcf\xc0\xdc\xbc\x04\xe6\x54\x7c\x41\x23\x44\xff\x47\x7c\x24\x7e\x08\x8c\xa2\xdd\xe0\x12\x65\x16\x9f\x0d\x09\x2b\x24\x09\x69\x29\x9d\x47\x5a\xb2\x86\xf2\xe8\x86\x8d\xa6\x44\x7a\x84\xd2\x61\xbe\x64\x9c\xc1\xdc\xbf\x24\xaa\x23\xfc\xa3\x51\xab\x25\xfb\x35\xfa\xf8\x6d\x74\x67\xab\x5a\x92\x4a\x34\x32\x48\xad\x21\x34\xb4\x64\x6f\x1f\x96\x98\x15\x78\x91\x96\xce\x56\xb8\xbc\x9c\x70\x49\x91\xc6\xb8\x6d\x61\xf1\x1e\x0b\xe5\xc9\xad\x3f\xbe\x7f\x07\x5d\xc7\xc3\x5f\xb5\x85\xae\xbb\xed\xef\x1f\x65\x01\x5d\x07\xbf\x34\xda\xa0\x93\x89\xd2\x8a\xd6\xd0\x3b\x38\x12\x3c\xa0\x04\x44\xad\xcc\x13\x38\xd4\x4b\xa6\x52\x6b\x18\xd0\xba\xc6\x25\x53\x95\x2c\x90\xab\xd4\xb2\x89\x85\x27\x49\x2a\xe5\xb9\x5c\xf5\x7e\x8b\xde\x74\x80\xe0\x69\xad\xd1\x97\x88\xb4\x1f\x96\x7a\xcf\x13\x6b\xc9\x93\x93\xf5\xa2\x52\x66\x91\x7a\xcf\x80\xc7\x67\x82\x07\x45\x45\x62\xb3\xf5\x88\x98\xa9\xd5\xd4\x88\x5e\x11\xa9\x0c\xba\x31\xdb\x60\xb7\x9b\x3e\x25\x0e\x65\x96\xba\xa6\x4a\x66\xf6\xb1\xaa\x58\xc8\x4d\x0b\x8e\x48\x26\xb8\x8c\x05\xd7\xea\x20\x6e\xc2\x96\x29\xa9\x15\x4e\xa1\xfb\xd2\xee\x86\x0a\x6e\x75\x7c\xb6\xfd\x39\x63\x50\xcb\x02\xa3\x9e\xe3\x0e\x87\x30\xb1\x97\xff\xa1\x95\xc2\x57\x52\xeb\xf8\x78\x47\x83\x4d\xf0\xf2\x72\x5e\x53\xa6\x56\xb3\x9f\xf5\x54\x11\xe1\x5f\x14\x39\x55\x94\xc4\xe2\xef\xb0\x47\x23\xcc\xc0\x9a\x5b\x68\xdb\xc5\xbd\x24\xec\xd9\xd5\x33\x3a\x6d\x1b\x1e\x97\xc5\x1b\x99\xf5\xf9\x3d\x7c\xd5\x75\x47\xc9\x4a\x8d\x8e\x60\xb8\x46\x99\x34\x05\x3a\x06\xce\x6a\x1c\x2d\x7b\x02\xb4\xed\x06\xb1\xeb\xe0\x7b\x55\x94\x17\x70\xe7\x14\xa9\x54\xea\x0b\x90\x26\xe3\xd6\xc1\x3d\xe6\xa9\x35\x97\xb0\x9a\x11\x57\xe8\x21\xb7\x8d\xc9\x4e\x91\x6d\x5b\x34\x59\xd7\xcd\x3a\x52\x5e\xc5\x1f\x9a\xaa\x92\x6e\x2d\x78\x79\x35\x93\xa5\xd9\x0c\x93\x56\x9e\xa2\xc2\xd9\xa6\x66\x27\x87\x62\xeb\x13\x29\xc2\x6a\xcf\x71\x70\xf6\xb5\x34\x9b\xf9\x94\x59\x11\x46\x48\xa3\x81\x45\x10\xaf\x97\xb7\x77\x3a\x12\x9b\xc4\x8f\x96\xa4\x16\x3c\xd9\xab\xe0\x60\x50\xdb\xd6\xf5\xfa\xc2\xab\x27\x5c\x5f\xc0\xab\x95\xd4\x0d\xc2\xed\x72\xcc\xf1\x66\xfd\x01\x57\xe8\x14\xad\x67\x8d\xfa\x7f\x54\xb4\x4c\x50\xc3\x70\x8d\xda\x36\xb5\xda\xba\x21\x79\xd7\x41\xdd\x68\x3d\x0d\xd4\x48\x75\x2c\xe8\x34\xd5\xb6\x1d\xa2\x61\xbf\xbe\x23\x44\x43\x2b\xb7\x1e\xcd\xce\xa3\x56\x5e\xc5\xf7\x48\x52\x69\xbf\xdb\xd8\x8d\x40\xc3\xe9\xf6\x2f\xd2\x6c\x9d\x27\x1d\x43\xd8\x89\x31\xaf\xa5\x41\x0d\xc3\x35\xca\x30\x97\x8d\xde\x1f\xed\x03\xef\x61\x05\x28\x53\x1c\x93\xb9\xbc\xde\x75\x1d\xf6\x73\x2f\x65\x28\x67\xf1\xa3\xac\x70\x4f\xa7\x97\xb7\x28\x40\x6c\x39\xef\x75\xeb\xc0\x7e\x72\x36\x79\x79\xbd\x3f\x94\x3b\xcf\xdc\x71\xda\xfd\x5a\x67\xc7\xda\x3f\x26\xbe\x47\x9f\x3a\x55\x93\xb2\xe6\x60\x14\x5e\x00\x9f\x5b\x4b\x07\x8b\x75\x70\x9d\x96\xff\x26\xd3\x3b\x65\x9e\xba\x8e\x01\x49\x57\xf4\x07\xf6\xef\x89\x96\xe6\x69\xa6\x41\x70\xe8\xcf\x85\xe7\xea\x38\xb1\x69\x4e\x6f\x9e\x50\xe2\xce\xf2\x4d\xd1\x1c\x56\x2d\xea\xf8\x07\x99\x21\xfc\xa9\xa8\x04\x91\xda\x0c\x63\x71\x2d\xf8\x70\x03\xc9\x7a\xcb\xa8\x7f\x85\xf0\xb7\x9c\x17\x8a\xca\x26\x59\xa4\xb6\xe2\x5f\xd0\xfb\xdc\xc9\xbf\x59\xfc\xcd\x74\x1b\xce\xb7\xfa\x20\xc7\x5d\x89\xe9\x93\x6d\x08\xa8\x44\xf0\xb6\x71\x29\x42\x9f\x03\x24\xdd\x3e\x9b\xa3\x40\xd3\x28\x83\x64\xad\xf6\xdc\x61\xc1\xe2\x67\x8c\x07\xd9\x05\x0f\x3a\x8c\x47\x7c\x10\x51\xf0\x70\xea\x0b\x1e\xde\x37\x27\xf1\xfe\x09\x00\x00\xff\xff\x30\xe0\x25\xc3\x9b\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/repositories.html"].(os.FileInfo),
		fs["/tags.html"].(os.FileInfo),
		fs["/vulns.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
